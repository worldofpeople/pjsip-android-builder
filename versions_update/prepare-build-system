#!/bin/bash -e

. config.conf

BASEDIR=$(pwd)

NDK_FILE=ndk.zip
NDK_DIR=ndk
SDK_FILE=sdk.zip

#Force use of GCC instead of ndk default CLANG
export NDK_TOOLCHAIN_VERSION=4.9
export PATH="$NDK_TOOLCHAIN_VERSION:$PATH"

if [ "$SETUP_PACKAGES" == "1" ]
then
    # Setup Java 8
    sudo add-apt-repository -y ppa:webupd8team/java
    sudo apt-get update
    sudo apt-get purge -y openjdk*
    echo debconf shared/accepted-oracle-license-v1-1 select true | sudo debconf-set-selections
    echo debconf shared/accepted-oracle-license-v1-1 seen true | sudo debconf-set-selections
    sudo apt-get -y install oracle-java8-installer ant

    sudo apt-get install -y unzip git

    DEPS="vim git curl bzip2 gcc g++ binutils make autoconf openssl \
          libssl-dev ant libopus0 \
          libpcre3 libpcre3-dev build-essential nasm \
          libc6:i386 libstdc++6:i386 zlib1g:i386"
    sudo -- sh -c "dpkg --add-architecture i386; apt-get update && apt-get -y upgrade && apt-get install -y ${DEPS}"
fi

if [ "$DOWNLOAD_NDK" == "1" ]
then
    echo "Downloading Android NDK ..."
    cd "${BASEDIR}"
    curl -L -# -o $NDK_FILE "$NDK_DOWNLOAD_URL" 2>&1
    rm -rf "$NDK_DIR_NAME"
    echo "Android NDK downloaded!"
    echo "Extracting Android NDK ..."
    unzip $NDK_FILE -d $NDK_DIR
    mv $NDK_DIR/$NDK_DIR_NAME .
    rm -rf $NDK_DIR
fi

if [ "$DOWNLOAD_SDK" == "1" ]
then
    echo "Downloading Android SDK ..."
    cd "${BASEDIR}"
    curl -L -# -o $SDK_FILE "$SDK_DOWNLOAD_URL" 2>&1
    rm -rf "$SDK_DIR_NAME"
    mkdir $SDK_DIR_NAME
    echo "Android SDK downloaded!"
    echo "Extracting Android SDK ..."
    unzip $SDK_FILE -d $SDK_DIR_NAME
    rm -rf $SDK_FILE
fi

if [ "$DOWNLOAD_ANDROID_APIS" == "1" ]
then
    cd ${BASEDIR}/${SDK_DIR_NAME}/tools

    ALL_SDK=$(./android list sdk --all)

    for api in "${SETUP_ANDROID_APIS[@]}"
    do
        echo "Downloading Android API Platform ${api}..."
        PACKAGE=$(echo "${ALL_SDK}" | grep "API ${api}" | head -n 1 | awk '{print $1}' | cut -d'-' -f 1)
        echo yes | ./android update sdk --all --filter ${PACKAGE} --no-ui --force
    done

    PACKAGE=$(echo "${ALL_SDK}" | grep "Android SDK Platform-tools" | head -n 1 | awk '{print $1}' | cut -d'-' -f 1)
    echo yes | ./android update sdk --all --filter ${PACKAGE} --no-ui --force

    PACKAGE=$(echo "${ALL_SDK}" | grep "Build-tools" | grep "${BUILD_TOOLS_VERSION}" | head -n 1 | awk '{print $1}' | cut -d'-' -f 1)
    echo yes | ./android update sdk --all --filter ${PACKAGE} --no-ui --force
fi

if [ "$DOWNLOAD_PJSIP" == "1" ]
then
    echo "Downloading PJSIP ..."
    cd "${BASEDIR}"
    curl -L -# -o pjsip.tar.bz2 "$PJSIP_DOWNLOAD_URL" 2>&1
    rm -rf "$PJSIP_DIR_NAME"
    echo "PJSIP downloaded!"
    echo "Extracting PJSIP ..."
    tar xjf pjsip.tar.bz2 && rm -rf pjsip.tar.bz2


    if [ "${PJSIP_DIR_NAME}" == "pjproject-2.8" ]
    then
        echo "Fix BASH script error in 2.8 tag ..."
        sed -i 's/TARGET_HOST+=-linux-android/TARGET_HOST="\${TARGET_HOST}-linux-android"/g' "${BASEDIR}/${PJSIP_DIR_NAME}/configure-android"
    fi

    echo "Apply patch to support G.729 codec without Intel IPP codec library ..."
    cd g729_patch
    ./install.sh
    cd ..
fi

if [ "$DOWNLOAD_SWIG" == "1" ]
then
    echo "Downloading SWIG ..."
    cd "${BASEDIR}"
    curl -L -# -o swig.tar.gz "$SWIG_DOWNLOAD_URL" 2>&1
    rm -rf "$SWIG_DIR_NAME"
    echo "SWIG downloaded!"
    echo "Extracting SWIG ..."
    tar xzf swig.tar.gz && rm -rf swig.tar.gz
    cd "$SWIG_DIR_NAME"
    ./configure
    make && sudo make install
    cd ..
    rm -rf "$SWIG_DIR_NAME"
fi

if [ "$DOWNLOAD_OPENSSL" == "1" ]
then
    echo "Downloading OpenSSL ..."
    cd "${BASEDIR}"
    curl -L -# -o openssl.tar.gz "$OPENSSL_DOWNLOAD_URL" 2>&1
    rm -rf "$OPENSSL_DIR_NAME"
    echo "OpenSSL downloaded!"
    echo "Extracting OpenSSL ..."
    tar xzf openssl.tar.gz && rm -rf openssl.tar.gz
    cd ${BASEDIR}
    ./openssl-build-target-archs
fi

if [ "$DOWNLOAD_LIBYUV" == "1" ]
then
    echo "Downloading libyuv ..."
    cd "${BASEDIR}"
    rm -rf "${LIBYUV_REPO_DIR_NAME}"
    git clone "${LIBYUV_REPO_PATH}"
    cd "${LIBYUV_REPO_DIR_NAME}"
    export PATH="${BASEDIR}/${NDK_DIR_NAME}:$PATH"

    # Re-enable static library, disabled with https://github.com/illuspas/libyuv-android/commit/d5d7e66ed635cf96fce1aa029ccc24a06bb0e7bc
    sed -i 's/#include $(BUILD_SHARED_LIBRARY)/include $(BUILD_SHARED_LIBRARY)/g' jni/Android.mk
    sed -i 's/include $(BUILD_STATIC_LIBRARY)/#include $(BUILD_STATIC_LIBRARY)/g' jni/Android.mk   

    if [ "${OPENH264_TARGET_NDK_LEVEL}" -ge "21" ]
    then
	# BY ENZO -> remove mips -> not very well supported above API 18
        #sed -i 's/APP_ABI := armeabi-v7a arm64-v8a x86 x86_64/APP_ABI := armeabi armeabi-v7a arm64-v8a x86 x86_64 mips mips64/g' jni/Application.mk
	sed -i 's/APP_ABI := armeabi-v7a arm64-v8a x86 x86_64/APP_ABI := armeabi armeabi-v7a arm64-v8a x86 x86_64/g' jni/Application.mk
    else
        sed -i 's/APP_ABI := armeabi-v7a arm64-v8a x86 x86_64/APP_ABI := armeabi armeabi-v7a x86/g' jni/Application.mk
    fi

    ndk-build
fi

if [ "$DOWNLOAD_OPENH264" == "1" ]
then
    echo "Downloading OpenH264 ..."
    cd "${BASEDIR}"
    curl -L -# -o openh264.tar.gz "$OPENH264_DOWNLOAD_URL" 2>&1
    rm -rf "${OPENH264_DIR_NAME}"
    echo "OpenH264 downloaded!"
    echo "Extracting OpenH264 ..."
    tar xzf openh264.tar.gz && rm -rf openh264.tar.gz
    if [ "${OPENH264_DIR_NAME}" == "openh264-1.8.0" ] && [ "${OPENH264_TARGET_NDK_LEVEL}" -ge "21" ]
    then
        echo "Patching OpenH264 to be able to compile with Android API 21+.."
        cp ${BASEDIR}/openh264-1.0.0-android21.patch ${BASEDIR}/${OPENH264_DIR_NAME}/
        cd ${OPENH264_DIR_NAME} && patch -p1 < openh264-1.0.0-android21.patch || true
    fi
    cd ${BASEDIR}
    ./openh264-build-target-archs || true
fi

echo "The build system is ready! Execute: ./build to build PJSIP :)"

